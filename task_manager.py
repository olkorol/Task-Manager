# -*- coding: utf-8 -*-
"""task_manager

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TPdL3Ib-tK3jX7Q8m2jobGKadyb-iB9G
"""

import json
import os
from datetime import datetime

# File path to save the tasks
FILE_PATH = "tasks.json"

# Initialize dictionaries to store tasks
tasks = {
    "inbox": [],
    "notes": [],
    "calendar": [],
    "someday_maybe": [],
    "backlog": [],
    "projects": [],
    "done": [],
    "Task delegated": []
}

# Mapping of task durations to numerical values for sorting
duration_map = {
    "30 minutes": 0.5,
    "1 hour": 1,
    "2 hours": 2,
    "3 hours": 3,
    "4 hours": 4,
    "5 hours": 5,
    "5+ hours": 6
}

# Function to save tasks to a file
def save_tasks():
    with open(FILE_PATH, 'w', encoding='utf-8') as file:
        json.dump(tasks, file, ensure_ascii=False, indent=4)
    print("Tasks have been saved.")

# Function to load tasks from a file
def load_tasks():
    if os.path.exists(FILE_PATH):
        with open(FILE_PATH, 'r', encoding='utf-8') as file:
            global tasks
            tasks = json.load(file)
        print("Tasks have been loaded.")
    else:
        print("No saved tasks found.")

# Function to add a task to the appropriate category with a duration and optional date
def add_task(category, description, duration, planned_date=None):
    task = {"description": description, "duration": duration}

    # Add planned date if category is calendar
    if category == "calendar" and planned_date:
        task["date"] = planned_date

    tasks[category].append(task)

    # Sort tasks in the calendar by date and other categories by duration
    if category == "calendar":
        sort_calendar_by_date()
    else:
        sort_tasks_by_duration(category)

    print(f"Task added to {category}: {description} (Duration: {duration})")

# Function to sort tasks by duration in a given category
def sort_tasks_by_duration(category):
    tasks[category].sort(key=lambda task: duration_map[task["duration"]])

# Function to sort calendar tasks by date
def sort_calendar_by_date():
    tasks["calendar"].sort(key=lambda task: datetime.strptime(task["date"], "%Y-%m-%d"))

# Function to select the task duration
def select_duration():
    durations = {
        "0": "30 minutes",
        "1": "1 hour",
        "2": "2 hours",
        "3": "3 hours",
        "4": "4 hours",
        "5": "5 hours",
        "6": "5+ hours"
    }

    print("Select task duration:")
    for key, value in durations.items():
        print(f"{key}: {value}")

    choice = input("Enter the number corresponding to the duration: ")
    return durations.get(choice, "Unspecified duration")

# Function to manage tasks
def task_management():
    inbox = input("Is there a new task in the inbox? (y/n): ").lower()
    if inbox == "n":
        print("No new tasks to process.")
        return

    task_description = input("What is the task? (Describe the task): ")
    duration = select_duration()  # Select the duration for the task
    add_task("inbox", task_description, duration)

    action_needed = input("Does something need to be done? (y/n): ").lower()
    if action_needed == "no":
        add_task("notes", task_description, duration)
        save_tasks()
        return

    personal_task = input("Is this task for me? (y/n): ").lower()
    if personal_task == "n":
        delegate = input("Who will handle this? (Enter the name): ")
        add_task("Task delegated", f"{task_description} - Delegated to {delegate}", duration)
        print(f"Task delegated to {delegate}.")
        save_tasks()
        return

    this_week = input("Does it need to be done this week? (y/n): ").lower()
    if this_week == "n":
        future_decision = input("Plan it in the calendar or postpone for later? (calendar/future): ").lower()
        if future_decision == "calendar":
            planned_date = input("Enter the planned date (e.g., YYYY-MM-DD): ")
            add_task("calendar", task_description, duration, planned_date)
        else:
            add_task("someday_maybe", task_description, duration)
        save_tasks()
        return

    unclear_task = input("Is the task vague or complicated? (y/n): ").lower()
    if unclear_task == "y":
        add_task("projects", task_description, duration)
        save_tasks()
        return

    short_task = input("Can the task be done in 2 minutes or less? (y/n): ").lower()
    if short_task == "y":
        add_task("done", task_description, duration)
        print("Task completed!")
    else:
        add_task("backlog", task_description, duration)
        print("Task added to backlog for future work.")

    save_tasks()

# Load tasks at the beginning
load_tasks()

# Run the task management process
task_management()